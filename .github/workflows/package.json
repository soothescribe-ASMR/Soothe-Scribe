// scripts/generate.js
import OpenAI from "openai";
import axios from "axios";
import fs from "fs";
import { google } from "googleapis";
import { execSync } from "child_process";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const oauth2Client = new google.auth.OAuth2(
  process.env.YT_CLIENT_ID,
  process.env.YT_CLIENT_SECRET,
  "http://localhost:3000/callback"
);
oauth2Client.setCredentials({ refresh_token: process.env.YT_REFRESH_TOKEN });
const youtube = google.youtube({ version: "v3", auth: oauth2Client });

async function main() {
  // 1. AI story
  const storyResp = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: "110-word soothing ASMR bedtime story." }],
  });
  const story = storyResp.choices[0].message.content.trim();

  // 2. AI title & description
  const titleResp = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: "55-character ASMR YouTube title." }],
  });
  const title = titleResp.choices[0].message.content.trim();
  const descResp = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: "2-line relaxing YouTube description." }],
  });
  const description = descResp.choices[0].message.content.trim();

  // 3. AI voice
  const mp3Buffer = await openai.audio.speech.create({
    model: "tts-1",
    voice: "nova",
    input: story,
  });
  fs.writeFileSync("voice.mp3", Buffer.from(await mp3Buffer.arrayBuffer()));

  // 4. AI video (Kie AI)
  const vidResp = await axios.post(
    "https://api.kie.ai/api/v1/gpt4o-image/generate",
    { prompt: "soft pastel clouds drifting, ultra HD, 1:1", size: "1:1" },
    { headers: { Authorization: `Bearer ${process.env.KIE_API_KEY}`, "Content-Type": "application/json" } }
  );
  const videoUrl = vidResp.data.videoUrl;
  const videoStream = (await axios.get(videoUrl, { responseType: "stream" })).data;
  const writer = fs.createWriteStream("video.mp4");
  videoStream.pipe(writer);
  await new Promise(res => writer.on("close", res));

  // 5. Merge audio + video
  execSync("ffmpeg -i video.mp4 -i voice.mp3 -c:v copy -c:a aac -shortest final.mp4");

  // 6. AI thumbnail
  const thumbResp = await openai.images.generate({
    prompt: "Pastel ASMR thumbnail 1280x720, crescent moon with headphones, lavender gradient, bold white text '2-min story'",
    n: 1,
    size: "1280x720",
    response_format: "url",
  });
  const thumbUrl = thumbResp.data[0].url;
  fs.writeFileSync("thumb.jpg", Buffer.from((await axios.get(thumbUrl, { responseType: "arraybuffer" })).data));

  // 7. YouTube upload
  const uploadResp = await youtube.videos.insert({
    part: "snippet,status",
    requestBody: { snippet: { title, description, tags: ["ASMR", "bedtime", "sleep"] }, status: { privacyStatus: "unlisted" } },
    media: { body: fs.createReadStream("final.mp4") },
  });
  await youtube.thumbnails.set({ videoId: uploadResp.data.id, media: { body: fs.createReadStream("thumb.jpg") } });

  // 8. Instagram & Facebook via Buffer
  const caption = `ðŸŒ™ ${title}\n\n${description}\n\n#ASMR #BedtimeStory #Relax #Sleep #SootheScribe`;
  const bufferToken = process.env.BUFFER_TOKEN;
  const igId = process.env.BUFFER_IG_ID;
  const fbId = process.env.BUFFER_FB_ID;
  await axios.post(
    "https://api.bufferapp.com/1/updates/create.json",
    {
      text: caption,
      profile_ids: [igId, fbId],
      media: { video: fs.readFileSync("final.mp4").toString("base64") },
      scheduled_at: Math.floor(Date.now() / 1000) + 300,
    },
    { headers: { Authorization: `Bearer ${bufferToken}`, "Content-Type": "application/json" } }
  );

  console.log("âœ… All platforms uploaded:", `https://youtu.be/${uploadResp.data.id}`);
}
await main();
{
  "name": "soothe-scribe",
  "version": "1.0.0",
  "main": "scripts/generate.js",
  "scripts": { "generate": "node scripts/generate.js" },
  "dependencies": {
    "axios": "^1.6.0",
    "openai": "^4.0.0",
    "googleapis": "^128.0.0",
    "facebook-nodejs-business-sdk": "^18.0.0"
  }
}
